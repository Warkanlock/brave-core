diff --git a/components/sync/engine_impl/get_updates_processor.cc b/components/sync/engine_impl/get_updates_processor.cc
index ad3725b3983b1c37e2e1861eb42b6f517e8c4922..1676063f35604a36bf7b612124c01f01babdc03b 100644
--- a/components/sync/engine_impl/get_updates_processor.cc
+++ b/components/sync/engine_impl/get_updates_processor.cc
@@ -18,7 +18,7 @@
 #include "components/sync/engine_impl/update_handler.h"
 #include "components/sync/nigori/keystore_keys_handler.h"
 #include "third_party/protobuf/src/google/protobuf/repeated_field.h"
-
+  #include "base/strings/string_number_conversions.h"
 namespace syncer {
 
 namespace {
@@ -192,12 +192,16 @@ SyncerError GetUpdatesProcessor::DownloadUpdates(ModelTypeSet* request_types,
   return result;
 }
 
+bool g_b_reset_progress_marker = false;
+
 void GetUpdatesProcessor::PrepareGetUpdates(
     const ModelTypeSet& gu_types,
     sync_pb::ClientToServerMessage* message) {
+DLOG(ERROR) << "[BraveSync] " << __func__ << " 000 g_b_reset_progress_marker=" << g_b_reset_progress_marker;
   sync_pb::GetUpdatesMessage* get_updates = message->mutable_get_updates();
 
   for (ModelType type : gu_types) {
+DLOG(ERROR) << "[BraveSync] " << __func__ << " 001 for type="<< ModelTypeToString(type);
     auto handler_it = update_handler_map_->find(type);
     DCHECK(handler_it != update_handler_map_->end())
         << "Failed to look up handler for " << ModelTypeToString(type);
@@ -206,6 +210,14 @@ void GetUpdatesProcessor::PrepareGetUpdates(
     *progress_marker = handler_it->second->GetDownloadProgress();
     progress_marker->clear_gc_directive();
 
+DLOG(ERROR) << "[BraveSync] " << __func__ << " 002 progress_marker->token()="<< base::HexEncode(progress_marker->token().c_str(), progress_marker->token().size());
+    if (g_b_reset_progress_marker && type ==  syncer::ModelType::SESSIONS) {
+      progress_marker->clear_token();
+DLOG(ERROR) << "[BraveSync] " << __func__ << " done reset of progress marker token!!!";
+DLOG(ERROR) << "[BraveSync] " << __func__ << " 003 progress_marker->token()="<< base::HexEncode(progress_marker->token().c_str(), progress_marker->token().size());
+      g_b_reset_progress_marker = false;
+    }
+
     sync_pb::DataTypeContext context = handler_it->second->GetDataTypeContext();
     if (!context.context().empty())
       get_updates->add_client_contexts()->Swap(&context);
